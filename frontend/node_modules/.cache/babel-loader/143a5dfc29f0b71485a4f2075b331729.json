{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\n\nconst getLocalValue = (key, initValue) => {\n  //SSR NEXT.js\n  if (typeof window === 'undefined') return initValue; //if a value is already store \n\n  const localValue = JSON.parse(localStorage.getItem(key));\n  if (localValue) return localValue;\n};\n\nconst useLocalStorage = (key, initValue) => {\n  _s();\n\n  const [value, setValue] = useState(JSON.parse(localStorage.getItem(key)) || initValue);\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(value));\n  }, [key, value]);\n  return [value, setValue];\n};\n\n_s(useLocalStorage, \"Z8dBhCFsEXDTu2Edv4ZYxOXmT5s=\");\n\nexport default useLocalStorage;","map":{"version":3,"sources":["D:/FASTAPI_/mufan_/frontend/src/hooks/useLocalStorage.js"],"names":["useState","useEffect","getLocalValue","key","initValue","window","localValue","JSON","parse","localStorage","getItem","useLocalStorage","value","setValue","setItem","stringify"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,aAAa,GAAG,CAACC,GAAD,EAAKC,SAAL,KAAiB;AACnC;AACA,MAAG,OAAOC,MAAP,KAAkB,WAArB,EAAkC,OAAOD,SAAP,CAFC,CAInC;;AACA,QAAME,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqBP,GAArB,CAAX,CAAnB;AACA,MAAIG,UAAJ,EAAgB,OAAOA,UAAP;AACnB,CAPD;;AAQA,MAAMK,eAAe,GAAG,CAACR,GAAD,EAAKC,SAAL,KAAmB;AAAA;;AACvC,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAACO,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqBP,GAArB,CAAX,KAC5BC,SAD2B,CAAlC;AAGIH,EAAAA,SAAS,CAAC,MAAI;AACVQ,IAAAA,YAAY,CAACK,OAAb,CAAqBX,GAArB,EAAyBI,IAAI,CAACQ,SAAL,CAAeH,KAAf,CAAzB;AACH,GAFQ,EAEP,CAACT,GAAD,EAAKS,KAAL,CAFO,CAAT;AAIA,SAAO,CAACA,KAAD,EAAQC,QAAR,CAAP;AACP,CATD;;GAAMF,e;;AAUN,eAAeA,eAAf","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst getLocalValue = (key,initValue)=>{\r\n    //SSR NEXT.js\r\n    if(typeof window === 'undefined') return initValue;\r\n\r\n    //if a value is already store \r\n    const localValue = JSON.parse(localStorage.getItem(key));\r\n    if (localValue) return localValue;\r\n}\r\nconst useLocalStorage = (key,initValue) => {\r\n    const [value, setValue] = useState(JSON.parse(localStorage.getItem(key))\r\n        || initValue);\r\n\r\n        useEffect(()=>{\r\n            localStorage.setItem(key,JSON.stringify(value));\r\n        },[key,value])\r\n\r\n        return [value, setValue];\r\n}\r\nexport default useLocalStorage;"]},"metadata":{},"sourceType":"module"}