{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\n\nconst getLocalValue = (key, initValue) => {\n  //SSR/\n  //if a value is already store \n  const localValue = JSON.parse(localStorage.getItem(key));\n  if (localValue) return localValue; //return result of a function\n\n  if (initValue instanceof Function) return initValue();\n  return initValue;\n};\n\nconst useLocalStorage = (key, initValue) => {\n  _s();\n\n  const [value, setValue] = useState(() => {\n    return getLocalValue(key, initValue);\n  });\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(value));\n  }, [key, value]);\n  return [value, setValue];\n};\n\n_s(useLocalStorage, \"zVWvaMhjZy1ExYAz8Q66UE1Jg58=\");\n\nexport default useLocalStorage;","map":{"version":3,"sources":["D:/FASTAPI_/mufan_/frontend/src/hooks/useLocalStorage.js"],"names":["useState","useEffect","getLocalValue","key","initValue","localValue","JSON","parse","localStorage","getItem","Function","useLocalStorage","value","setValue","setItem","stringify"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,aAAa,GAAG,CAACC,GAAD,EAAKC,SAAL,KAAiB;AACnC;AACA;AACA,QAAMC,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqBN,GAArB,CAAX,CAAnB;AACA,MAAIE,UAAJ,EAAgB,OAAOA,UAAP,CAJmB,CAMnC;;AACA,MAAGD,SAAS,YAAYM,QAAxB,EAAkC,OAAON,SAAS,EAAhB;AAElC,SAAOA,SAAP;AACH,CAVD;;AAWA,MAAMO,eAAe,GAAG,CAACR,GAAD,EAAKC,SAAL,KAAmB;AAAA;;AACvC,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,MAAI;AACnC,WAAOE,aAAa,CAACC,GAAD,EAAKC,SAAL,CAApB;AACH,GAFiC,CAAlC;AAIIH,EAAAA,SAAS,CAAC,MAAI;AACVO,IAAAA,YAAY,CAACM,OAAb,CAAqBX,GAArB,EAAyBG,IAAI,CAACS,SAAL,CAAeH,KAAf,CAAzB;AACH,GAFQ,EAEP,CAACT,GAAD,EAAKS,KAAL,CAFO,CAAT;AAIA,SAAO,CAACA,KAAD,EAAQC,QAAR,CAAP;AACP,CAVD;;GAAMF,e;;AAWN,eAAeA,eAAf","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst getLocalValue = (key,initValue)=>{\r\n    //SSR/\r\n    //if a value is already store \r\n    const localValue = JSON.parse(localStorage.getItem(key));\r\n    if (localValue) return localValue;\r\n\r\n    //return result of a function\r\n    if(initValue instanceof Function) return initValue();\r\n\r\n    return initValue; \r\n}\r\nconst useLocalStorage = (key,initValue) => {\r\n    const [value, setValue] = useState(()=>{\r\n        return getLocalValue(key,initValue);\r\n    });\r\n\r\n        useEffect(()=>{\r\n            localStorage.setItem(key,JSON.stringify(value));\r\n        },[key,value])\r\n\r\n        return [value, setValue];\r\n}\r\nexport default useLocalStorage;"]},"metadata":{},"sourceType":"module"}